#!/bin/python3
import os
import sys
import re

UPDATE_DIR = "./updates"
RAW_ICO_DIR = "cart_raw_ico"
CONFIG = "testpackages"
SR_CODE = "sr_code"
GROUPS_DIR = 'groups'
ALT_TEXT_DIR = 'alt_text'
# Please verify CONFIG variable is accurate.

def mkdir_p(path):
    if((path[0] != '.') and (path[0] != '/')):
        return "The path passed to mkdir_p() must start with either '.' or '/'.  Path passed in was: [" + path + "]"
    curr = ""
 
    if path[0] == '.':
        curr = "."
        path = path[1:]

    path = path[1:]
    parts = path.split("/")
    conpath = curr
    
    try:
        for part in parts:
            conpath += ("/" + part)
            if os.path.isdir(conpath): continue
            os.mkdir(conpath)
    except Exception as ex:
        return str(ex)
    return ""


def usage():
    print("\nUsage:\n")
    print("\t./tcm [create|clear|install|edit|delete|list] <name> [path/to/myfile]\n") 
    print("\t\tcreate : creates a new File State Database file (*.tar.gz)")
    print("\t\tclear : clears out all files and directories for a given version")
    print("\t\tinstall : unzips and untars the <name> file into ./conalaun (from testpackages/files/<VERSION>/<name>.tar.gz)")
    print("\t\tedit : extracts ./testpackages/files/<VERSION>/<VERSION>.tar.gz and replaces 'path/to/myfile' (inside the tar.gz) with file 'myfile' in ./updates directory.")
    print("\t\tdelete : removes path/to/myfile from the ERAF (<VERSION>.tar.gz)")
    print("\t\tlist : display list of all (*.tar.gz) files for current VERSION.")
    print("\n\t\t<name> : name of file to make (only for FSDBs, and only with 'create',  and 'install' operations).") 
    print("\n\t\tNOTE: 'edit' and 'delete' are only to edit the Expected Results Archive File (ERAF) - NOT FSDBs.\n\t\tTo edit an FSDB, just do: (a) tcm install <myfsdb>; then (b) change file system, then (c) tcm create <myfsdb>.\n")
    print("\t\tFor 'edit' & 'delete', the version is taken from the VERSION environment variable. So do not specify <name>.\n")
    sys.exit(0)


def safe_rec_del(thedir: str) -> None:
    
    thedir_stripped = thedir.strip()
    
    mo = re.match('^[a-zA-Z].*', thedir)
    if not bool(mo):
        return("Refusing to perform rm -rf on dir '" + thedir + "' - directory to delete must start with a alphabetical charactor.")
    
    if (thedir_stripped[0] == '.') or (thedir_stripped[0] == '/'):
        return("Refusing to perform rm -rf on dir '" + thedir + "'")

    rec_del_cmd = "rm -rf " + thedir_stripped
    res = os.system(rec_del_cmd)

    if res != 0:
        return("\nProblem executing '" + rec_del_cmd + "'")

    return ""


def run(OPERATION, VERSION, NAME, PATH_AND_FILE, OVER_RIDE_DIR = ""):
    arcname = ""
    errors = list()
    warnings = list()

    if OPERATION == "create":
        if OVER_RIDE_DIR == "":            
            arcname = CONFIG + "/files/" + VERSION + "/" + NAME + ".tar.gz"
            if not os.path.isdir(CONFIG + "/files/" + VERSION):
                errors.append("Directory: '" + CONFIG + "/files/" + VERSION + "' does not exist.\n")
                return (errors, warnings)
        else:
            if not os.path.isdir(OVER_RIDE_DIR):
                errors.append("Directory: '" + OVER_RIDE_DIR + "' does not exist.\n")
                return (errors, warnings)

            arcname = OVER_RIDE_DIR + "/" + NAME + ".tar.gz"            

        mo = re.match('^(.+\.tar.gz)\.tar.gz$', arcname)        
        if bool(mo):
            arcname = mo.group(1)

    if not os.path.isdir(UPDATE_DIR):
        os.mkdir(UPDATE_DIR)
        if not os.path.isdir(UPDATE_DIR):
            errors.append("Cannot create directory: '" + UPDATE_DIR + "'")
            return (errors, warnings)

    if OPERATION == 'edit' or OPERATION == 'delete':
        mo = re.match('^/(.+)$', PATH_AND_FILE)
        _PATH = ""
        _FILE = ""

        if bool(mo):
            PATH_AND_FILE = mo.group(1)
        else:
            errors.append("Path passed in does not start with '/'")
            return (errors, warnings)

        mo = re.match('^(.+)/(.+)$', PATH_AND_FILE)
        if not bool(mo):
            # ok, it is a single filename at root.
            _FILE = PATH_AND_FILE
            _PATH = ''
        else:
            # there is a path and a filename...
            _PATH = '/' + mo.group(1)
            _FILE = mo.group(2)

        _SRC_FILE = UPDATE_DIR + "/" + _FILE

        if OPERATION == 'edit':
            if not os.path.isfile(_SRC_FILE):
                errors.append("Filename given ('" + _FILE + "') of path ('" + PATH_AND_FILE + "') does not exist in '" + UPDATE_DIR + "' directory.  Please create it.")
                return (errors, warnings)

        TEMPDIR = "temp_dir_for_edit"
       
        err = safe_rec_del(TEMPDIR)
        if err != "":
            errors.append(err)

        os.mkdir(TEMPDIR)
        if not os.path.isdir(TEMPDIR):
            errors.append("Was not able to create directory '" + TEMPDIR + "'")

        arcname = CONFIG + "/files/" + VERSION + "/" + NAME + ".tar.gz"

        if not os.path.isfile(arcname):
            errors.append(arcname + " does not exist.")
            return (errors, warnings)

        cmd = "tar zxf " + arcname + " -C " + TEMPDIR
        res = os.system(cmd)

        if res != 0:
            errors.append("Problem running '" + cmd + "' - " + str(res))
            return (errors, warnings)

        #print("_PATH = [" + _PATH + "]")
        #print("_FILE = [" + _FILE + "]")

        editdst = TEMPDIR + _PATH 

        if OPERATION == 'edit':
            copy_cmd = "cp " + _SRC_FILE + " ./" + editdst + "/" + _FILE
   
            if not os.path.isdir(editdst):
                # _PATH does not exist in archive NAME, so create it
                err = mkdir_p("./" + editdst)
     
                if err != '':
                    errors.append(err)
                    return (errors, warnings)
     
            res = os.system(copy_cmd)
            if res != 0:
                errors.append("Problem running command '" + copy_cmd + "'")
                return (errors, warnings)

        else:
            # ok, delete instead...
            if not os.path.isfile(editdst + "/" + _FILE):
                errors.append(_PATH + "/" + _FILE + ": does not even exist in the ERAF !")
            else:
                os.remove(editdst + "/" + _FILE)
                if os.path.isfile(editdst + "/" + _FILE):
                    errors.append("Could not remove file from archive.")

        if len(errors) > 0: return (errors, warnings)

        cmd = "tar czf " + arcname + " -C " + TEMPDIR + " ."
        res = os.system(cmd)

        if res != 0:
            errors.append("Problem running command '" + cmd + "': " + str(res))
            return (errors, warnings)

        return (errors, warnings)

    elif OPERATION == 'clear':
        dirs_to_del_str = RAW_ICO_DIR + ', ' + SR_CODE + ', ' + GROUPS_DIR + ', ' + ALT_TEXT_DIR
        print("\n*Clearing (" + dirs_to_del_str + ")")

        for file_to_remove in (RAW_ICO_DIR, SR_CODE, GROUPS_DIR, ALT_TEXT_DIR):            
            res = safe_rec_del(file_to_remove)
            if res != "":
                errors.append(res)
        
        return (errors, warnings) 

    elif OPERATION == 'create':
        # Make sure all files in <RAW_ICO_DIR> start with '^ico\d+-.+'
        # So that's 'ico' (no apostrope) then right after one or more digits then a dash, then one or more any charactor.
        for filename in os.listdir(RAW_ICO_DIR):

            mo = re.match('^ico\d+-.+$', filename)
            if not bool(mo):
                errors.append("Some files in '" + RAW_ICO_DIR + "' do not conform to proper format.  All files must start with 'ico' then one or more digits then a dash then one or more charactors.  One bad file name is '" + filename + "'.")
                return (errors, warnings)
        
        cmd = "tar czf " + arcname + ' ' + RAW_ICO_DIR + "/. " + SR_CODE + "/. " + GROUPS_DIR + "/. " + ALT_TEXT_DIR + "/."    
        res = os.system(cmd)

        if res != 0:
            errors.append("Problem running '" + cmd + "' - " + str(res) + "\n")
            return (errors, warnings)

        return (errors, warnings) 
        
    elif OPERATION == 'install':
        safe_rec_del(RAW_ICO_DIR)
        
        already_has_suffix = re.match('^.+\.tar\.gz$', NAME)
        if not bool(already_has_suffix):
            arcname = CONFIG + "/files/" + VERSION + "/" + NAME + ".tar.gz"
        else:
            arcname = CONFIG + "/files/" + VERSION + "/" + NAME
        
        if not os.path.isfile(arcname):
            errors.append(arcname + " does not exist.")
            return (errors, warnings)
        
        cmd = "tar zxf " + arcname + " -C ."

        res = os.system(cmd)
        if res != 0:
            errors.append("Problem running '" + cmd + "' - " + str(res))
            return (errors, warnings)
        
        return (errors, warnings)

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if __name__  == '__main__':

    if 'VERSION' not in os.environ.keys():
        print("\n'VERSION' environment variable not set.\n")
        print("Set it to a version file in ./testpackages/* (without the '.conf' extension)")
        print("\nSet it with export, example:")
        print('export VERSION="v1.000"')
        print("\n")
        sys.exit(0)

    VERSION = os.environ['VERSION']

    if len(sys.argv) != 2 and len(sys.argv) != 3:
       usage()
       sys.exit(0)

    OPERATION = sys.argv[1]
    NAME = ""
    PATH_AND_FILE = ""

    if OPERATION == 'create': 

       if os.path.isfile("constant_strings.dat"): 
          os.remove("constant_strings.dat")

          if os.path.isfile("constant_strings.dat"):
                print("**ERR: could not remove 'constant_strings.dat'")
                sys.exit(0)

          print("\n*INFO: I removed 'constant_strings.dat' - Press enter.\n")
          input()

    if (OPERATION == 'clear' or OPERATION == 'create'):
        for dir2create in (RAW_ICO_DIR, SR_CODE, GROUPS_DIR, ALT_TEXT_DIR):
                    
            if not os.path.isdir(dir2create):
                os.mkdir(dir2create)
                
                if not os.path.isdir(dir2create):                    
                    print("\n* RAW_ICO_DIR ('" + dir2create + "') does not exist.  I tried to create it but failed.\n")    
                    sys.exit(0)

    if OPERATION != 'list' and OPERATION != 'create' and OPERATION != 'clear' and OPERATION != 'edit' and OPERATION != 'install' and OPERATION != 'delete':
        print("\n*INVALID operation specified ('" + OPERATION + "')\n")
        sys.exit(1)

    print("\nVERSION: " + str(VERSION))
    print("OPERATION: " + str(OPERATION))

    if OPERATION == 'list':
        path_to_fsdbs = "./testpackages/files/" + VERSION
        if not os.path.isdir(path_to_fsdbs):
            print("\n*ERR: path '" + path_to_fsdbs + "' no good.\n")
            sys.exit(0)

        print("")
        for file in os.listdir(path_to_fsdbs):
            mo = re.match('^.+\.tar.gz$', file)
            if not bool(mo): continue
            print("\t" + file)

        print("")
        sys.exit(0)

    if OPERATION != 'clear' and len(sys.argv) != 3:
        print("\n*ERR: wrong number of arguments for '" + OPERATION + "' operation.\n")
        sys.exit(0)

    if OPERATION == 'clear' and len(sys.argv) != 2:
        print("\n*ERR: wrong number of arguments for 'clear' operation.\n")
        sys.exit(0)

    if OPERATION == 'edit' or OPERATION == 'delete':
        PATH_AND_FILE = sys.argv[2]
        NAME = VERSION
        print("PATH_AND_FILE: " + PATH_AND_FILE)
        print("NAME: " + NAME + "\n")
    elif OPERATION != 'clear':
        NAME = sys.argv[2]
    
    (errors, warnings) = run(OPERATION, VERSION, NAME, PATH_AND_FILE)

    if len(errors) == 0 and len(warnings) == 0:
        print("\nCompleted successfully.\n")
    else:
        if len(errors) > 0: 
            print("\n*ERRORS:\n")
            for err in errors:
                print("\t" + err + "\n")
    
        if len(warnings) > 0:
            print("\n*WARNINGS:\n")
            for warning in warnings: 
                print("\t" + warning + "\n")
