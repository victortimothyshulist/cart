#!/usr/bin/python3.7
import os
import sys
import re

UPDATE_DIR = "./updates"

# Please verify CONFIG variable (in get_files() below) is accurate.

def mkdir_p(path):
    if((path[0] != '.') and (path[0] != '/')):
        return "The path passed to mkdir_p() must start with either '.' or '/'.  Path passed in was: [" + path + "]"
    curr = ""
 
    if path[0] == '.':
        curr = "."
        path = path[1:]

    path = path[1:]
    parts = path.split("/")
    conpath = curr
    
    try:
        for part in parts:
            conpath += ("/" + part)
            if os.path.isdir(conpath): continue
            os.mkdir(conpath)
    except Exception as ex:
        return str(ex)
    return ""


def get_files(VERSION):
    state_seen = set()
    CONFIG = "testpackages"

    STATE_DIRS = ()
    STATE_FILES = ()

    CF = CONFIG + "/" + VERSION + ".conf"

    if not os.path.isfile(CF):
        return("Config file ('"  + CF + "') does not exist.", CONFIG, STATE_DIRS, STATE_FILES, set(), set())
    
    try:
        
        with open(CF, 'r') as fh:
            for line in fh:
                mo = re.match('^\s*state_(dir|file)s\s*=\s*(.*?)\s*$', line)
                if bool(mo):
                    type = mo.group(1)
                    info = mo.group(2)
                    info = info.strip()
                    info = info.replace(' ', '')

                    if info == '':
                        return("No values given for 'state_" + type + "s' in config file.", CONFIG, STATE_DIRS, STATE_FILES, set(), set())
                    state_seen.add(type)

                    if type == 'dir':
                        STATE_DIRS = info.split(',')
                    else:
                        STATE_FILES = info.split(',')

    except Exception as ex:
        return("\n*ERR: cannot open file '" + CF + "': " + str(ex), CONFIG, STATE_DIRS, STATE_FILES , set(), set())

    DIRSET = set(STATE_DIRS)
    FILESET = set(STATE_FILES)

    if ('dir' not in state_seen) or ('file' not in state_seen):
        return("Either 'state_dirs' and/or 'state_files' not mentioned in your config file.", CONFIG, STATE_DIRS, STATE_FILES, DIRSET, FILESET)

    return ("", CONFIG, STATE_DIRS, STATE_FILES, DIRSET, FILESET)

def usage():
    print("\nUsage:\n")
    print("\t./tcm.py [create|clear|verify|install|edit] <name> [path/to/myfile]\n") 
    print("\t\tlist : display list of all (*.tar.gz) files for current VERSION.")
    print("\t\tcreate : creates a new File State Database file (*.tar.gz)")
    print("\t\tclear : clears out all files and directories for a given version")
    print("\t\tverify : Checks if a given File State database tar.gz file contains all files and directories it supposed to.)")
    print("\t\tedit : extracts <VERSION>.tar.gz and replaces 'path/to/myfile' (inside the tar.gz) with file 'myfile' in current directory.")
    print("\t\tinstall : unzips and untars the <name> file into ./vcck (from testpackages/files/v1.000/<name>.tar.gz)")
    print("\n\t\t<name> : name of file to make (only for FSDBS, and only with 'create', 'verify' and 'install' operations).") 
    print("\n\t\tDELETE: not yet implemented. In future we are thinking of having 'tcm edit -/path/to/myfile'.  The negative sign would mean remove 'myfile' from that path.\n")
    print("\t\tNOTE: 'edit' is only to edit the Expected Results archive --- NOT FSDBs.  To edit an FSDB, just do: (a) tcm install <myfsdb>; then (b) change file system, then (c) tcm create <myfsdb>.\n")
    print("\t\tFor 'edit', the version is taken from the VERSION environment variable. So only path comes after 'edit'\n")
    sys.exit(0)

def safe_rec_del(thedir: str) -> None:
    
    thedir_stripped = thedir.strip()
    
    mo = re.match('^[a-zA-Z].*', thedir)
    if not bool(mo):
        return("Refusing to perform rm -rf on dir '" + thedir + "' - directory to delete must start with a alphabetical charactor.")
    
    if (thedir_stripped[0] == '.') or (thedir_stripped[0] == '/'):
        return("Refusing to perform rm -rf on dir '" + thedir + "'")

    rec_del_cmd = "rm -rf " + thedir_stripped
    res = os.system(rec_del_cmd)

    if res != 0:
        return("\nProblem executing '" + rec_del_cmd + "'")

    return ""


def run(OPERATION, VERSION, NAME, PATH_AND_FILE, OVER_RIDE_DIR = ""):
    (err, CONFIG, STATE_DIRS, STATE_FILES, DIRSET, FILESET) = get_files(VERSION)

    errors = list()
    warnings = list()

    if not os.path.isdir(UPDATE_DIR):
        os.mkdir(UPDATE_DIR)
        if not os.path.isdir(UPDATE_DIR):
            errors.append("Cannot create directory: '" + UPDATE_DIR + "'")
            return (errors, warnings)

    if err != "":
        errors.append(err)
        return (errors, warnings) 

    if OPERATION == 'edit':
        mo = re.match('^/(.+)$', PATH_AND_FILE)
        _PATH = ""
        _FILE = ""

        if bool(mo):
            PATH_AND_FILE = mo.group(1)
        else:
            errors.append("Path passed in for 'edit' does not start with '/'")
            return (errors, warnings)

        mo = re.match('^(.+)/(.+)$', PATH_AND_FILE)
        if not bool(mo):
            # ok, it is a single filename at root.
            _FILE = PATH_AND_FILE
            _PATH = ''
        else:
            # there is a path and a filename...
            _PATH = '/' + mo.group(1)
            _FILE = mo.group(2)

        _SRC_FILE = UPDATE_DIR + "/" + _FILE

        #print(_PATH + " :: " + _FILE + "::" + _SRC_FILE)

        if not os.path.isfile(_SRC_FILE):
            errors.append("Filename given ('" + _FILE + "') of path ('" + PATH_AND_FILE + "') does not exist in '" + UPDATE_DIR + "' directory.  Please create it.")
            return (errors, warnings)

        TEMPDIR = "temp_dir_for_edit"
       
        err = safe_rec_del(TEMPDIR)
        if err != "":
            errors.append(err)

        os.mkdir(TEMPDIR)
        if not os.path.isdir(TEMPDIR):
            errors.append("Was not able to create directory '" + TEMPDIR + "'")
          
        arcname = CONFIG + "/files/" + VERSION + "/" + NAME + ".tar.gz"

        if not os.path.isfile(arcname):
            errors.append(arcname + " does not exist.")
            return (errors, warnings)

        cmd = "tar zxf " + arcname + " -C " + TEMPDIR
        res = os.system(cmd)

        if res != 0:
            errors.append("Problem running '" + cmd + "' - " + str(res))
            return (errors, warnings)

        print("_PATH = [" + _PATH + "]")
        print("_FILE = [" + _FILE + "]")

        editdst = TEMPDIR + _PATH 
        copy_cmd = "cp " + _SRC_FILE + " ./" + editdst + "/" + _FILE
   
        if not os.path.isdir(editdst):
            # _PATH does not exist in archive NAME, so create it
            err = mkdir_p("./" + editdst)
     
            if err != '':
                errors.append(err)
                return (errors, warnings)
     
        res = os.system(copy_cmd)

        if res != 0:
            errors.append("Problem running command '" + copy_cmd + "'")
            return (errors, warnings)

        cmd = "tar czf " + arcname + " -C " + TEMPDIR + " ."
        res = os.system(cmd)

        if res != 0:
            errors.append("Problem running command '" + cmd + "': " + str(res))
            return (errors, warnings)

        return (errors, warnings)

    elif OPERATION == 'clear':

        for dir in STATE_DIRS:
            err = safe_rec_del(dir)
            if err != "":
                errors.append(err)

        for file in STATE_FILES:
            if os.path.isfile(file):
                os.remove(file)
                if os.path.isfile(file):
                    errors.append("Could not remove file '" + file + "'")

        return (errors, warnings) 
    
    elif OPERATION == 'create':
 
        arcname = ""

        if OVER_RIDE_DIR == "":
            arcname = CONFIG + "/files/" + VERSION + "/" + NAME + ".tar.gz"
        else:
            arcname = OVER_RIDE_DIR + "/" + NAME + ".tar.gz"

        inc_list = ""
  
        for dir in STATE_DIRS:
            if os.path.isdir(dir):
                inc_list += (" " + dir + "/.")
            else:
                warnings.append("dir '" + dir + "' - doesn't exist.")
        for file in STATE_FILES:
            if os.path.isfile(file):
                inc_list += (" " + file)
            else:
                warnings.append("file '" + file + "' - doesn't exist.")
  
        if inc_list == "":
            warnings.append("No files or directories exist for this version right now, so not creating the archive.")
            return (errors, warnings) 

        cmd = "tar czf " + arcname + inc_list
        res = os.system(cmd)
        if res != 0:
            errors.append("Problem running '" + cmd + "' - " + str(res) + "\n")
            return (errors, warnings) 

        return (errors, warnings) 

    elif OPERATION == 'install':
        
        already_has_suffix = re.match('^.+\.tar\.gz$', NAME)
        if not bool(already_has_suffix):
            arcname = CONFIG + "/files/" + VERSION + "/" + NAME + ".tar.gz"
        else:
            arcname = CONFIG + "/files/" + VERSION + "/" + NAME
        
        if not os.path.isfile(arcname):
            errors.append(arcname + " does not exist.")
            return (errors, warnings)
        
        cmd = "tar zxf " + arcname + " -C ."

        res = os.system(cmd)
        if res != 0:
            errors.append("Problem running '" + cmd + "' - " + str(res))
            return (errors, warnings)

        return run('verify', VERSION, NAME, PATH_AND_FILE, OVER_RIDE_DIR)

    elif OPERATION == 'verify':
        already_has_suffix = re.match('^.+\.tar\.gz$', NAME)

        if not bool(already_has_suffix):
            arcname = CONFIG + "/files/" + VERSION + "/" + NAME + ".tar.gz"
        else:
            arcname = CONFIG + "/files/" + VERSION + "/" + NAME

        if not os.path.isfile(arcname):
            errors.append(arcname + " does not exist.")
            return (errors, warnings)

        outfile = '_temp_out.txt'

        if os.path.isfile(outfile):
            os.remove(outfile)
            if os.path.isfile(outfile):
                errors.append("Cannot remove file '" + outfile + "'")
                return (errors, warnings)

        cmd = "tar ztf " + arcname + " > " + outfile
        res = os.system(cmd)

        if res != 0:
            errors.append("Problem running '" + cmd + "' - " + str(res))
            return (errors, warnings)
        
        if not os.path.isfile(outfile):
            errors.append("Ran command '" + cmd + "' but yet file '" + outfile + " doesn't exist!")
            return (errors, warnings)

        top_level_dirs_seen = set()
        top_level_files_seen = set()

        try:
            
            with open(outfile, 'r') as fh:
                for line in fh:
                    line = line.strip()

                    mo = re.match('^(\.\/)(.*)', line)
                    if bool(mo):
                        line = mo.group(2)

                    # if no '/' in it at all, then it is a top level file.
                    # otherwise, get the top level directory.
                    mo = re.match('^(.+?)/.*', line)
                    if not bool(mo):
                        top_level_files_seen.add(line)
                    else:
                        top_level_dirs_seen.add(mo.group(1))

        except Exception as ex:
            errors.append("Can't open file '" + outfile + "'; " + str(ex))
            return (errors, warnings)

        dir_diff = DIRSET.difference(top_level_dirs_seen)
        file_diff = FILESET.difference(top_level_files_seen)

        for missing in dir_diff:
            warnings.append("Directory: '" + missing + "' missing from archive.")

        for missing in file_diff:
            warnings.append("File: '" + missing + "' missing from archive.")

        return (errors, warnings) 

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if __name__  == '__main__':

    if 'VERSION' not in os.environ.keys():
        print("\n'VERSION' environment variable not set.\n")
        print("Set it to a version file in ./testpackages/* (without the '.conf' extension)")
        print("\nSet it with export, example:")
        print('export VERSION="v1.000"')
        print("\n")
        sys.exit(0)

    VERSION = os.environ['VERSION']

    if len(sys.argv) != 2 and len(sys.argv) != 3:
       usage()
       sys.exit(0)

    OPERATION = sys.argv[1]
    NAME = ""
    PATH_AND_FILE = ""

    print("\nVERSION: " + str(VERSION))
    print("OPERATION: " + str(OPERATION))

    if OPERATION == 'list':
        path_to_fsdbs = "./testpackages/files/" + VERSION
        if not os.path.isdir(path_to_fsdbs):
            print("\n*ERR: path '" + path_to_fsdbs + "' no good.\n")
            sys.exit(0)

        print("")
        for file in os.listdir(path_to_fsdbs):
            mo = re.match('^.+\.tar.gz$', file)
            if not bool(mo): continue
            print("\t" + file)

        print("")
        sys.exit(0)

    if OPERATION != 'clear' and len(sys.argv) != 3:
        print("\n*ERR: wrong number of arguments for '" + OPERATION + "' operation.\n")
        sys.exit(0)

    if OPERATION == 'clear' and len(sys.argv) != 2:
        print("\n*ERR: wrong number of arguments for 'clear' operation.\n")
        sys.exit(0)

    if OPERATION == 'edit':
        PATH_AND_FILE = sys.argv[2]
        NAME = VERSION
        print("PATH_AND_FILE: " + PATH_AND_FILE)
        print("NAME: " + NAME + "\n")
    elif OPERATION != 'clear':
        NAME = sys.argv[2]
    
    (errors, warnings) = run(OPERATION, VERSION, NAME, PATH_AND_FILE)

    if len(errors) == 0 and len(warnings) == 0:
        print("\nCompleted successfully.\n")
    else:
        if len(errors) > 0: 
            print("\n*ERRORS:\n")
            for err in errors:
                print("\t" + err + "\n")
    
        if len(warnings) > 0:
            print("\n*WARNINGS:\n")
            for warning in warnings: 
                print("\t" + warning + "\n")

